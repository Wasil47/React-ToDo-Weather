{"version":3,"sources":["components/todo/CreateArea.jsx","components/todo/Note.jsx","components/todo/ToDo.jsx","components/Header.jsx","components/Footer.jsx","components/weather/Weather.jsx","components/Web.jsx","serviceWorker.js","index.js"],"names":["CreateArea","props","useState","title","content","newNote","setNewNote","handleChange","e","target","name","value","prevNote","className","onChange","placeholder","autoComplete","rows","onClick","onAdd","preventDefault","Note","delete","id","ToDo","noteList","setNoteList","deleteNote","prevList","filter","note","index","map","n","i","key","Header","year","Date","getFullYear","Footer","keyURL","process","Weather","city","setCity","setResponseObj","icon","setIcon","temp","setTemp","error","setError","fullURL","iconURL","cityName","undefined","src","alt","fetch","then","res","json","data","cod","Error","main","weather","catch","err","console","log","Web","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5e6560de.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction CreateArea(props) {\r\n  const [newNote, setNewNote] = useState({\r\n    title: \"\",\r\n    content: \"\",\r\n  });\r\n\r\n  function handleChange(e) {\r\n    const { name, value } = e.target;\r\n    setNewNote(prevNote =>{\r\n      return {\r\n        ...prevNote,\r\n        [name]: value,\r\n      };      \r\n    });\r\n  }\r\n  function submitNote(e) {\r\n    props.onAdd(newNote);    \r\n    setNewNote({\r\n      title: \"\",\r\n      content: \"\",\r\n    });\r\n    e.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"create-note\">\r\n        <input\r\n          onChange={handleChange}\r\n          name=\"title\"\r\n          placeholder=\"Title\"\r\n          autoComplete=\"off\"\r\n          value={newNote.title}\r\n        />\r\n        <textarea\r\n          onChange={handleChange}\r\n          name=\"content\"\r\n          placeholder=\"Take a note...\"\r\n          rows=\"3\"\r\n          value={newNote.content}\r\n        />\r\n        <button onClick={submitNote}>Add</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateArea;\r\n","import React from \"react\";\r\n\r\nfunction Note(props) {\r\n\r\n  function sendId(){\r\n    props.delete(props.id);\r\n  }\r\n  return (\r\n    <div className=\"note\">\r\n      <h1>{props.title}</h1>\r\n      <p>{props.content}</p>\r\n      <button onClick={sendId}>Delete</button>\r\n    </div>\r\n  );\r\n}\r\nexport default Note;\r\n","import React, { useState } from \"react\";\r\nimport CreateArea from \"./CreateArea\";\r\nimport Note from \"./Note\";\r\n\r\nfunction ToDo() {\r\n  const [noteList, setNoteList] = useState([]);\r\n  function onAdd(newNote) {\r\n    setNoteList((prevList) => {\r\n      return [...prevList, newNote];\r\n    });\r\n  }\r\n  function deleteNote(id) {\r\n    setNoteList((prevList) => {\r\n      return prevList.filter((note, index)=> index !== id);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <CreateArea onAdd={onAdd} />\r\n      {noteList.map((n, i) => (\r\n        <Note\r\n          key={i}\r\n          id={i}\r\n          title={n.title}\r\n          content={n.content}\r\n          delete={deleteNote}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import React from 'react';\r\n\r\nfunction Header() {\r\n  return <header>React Apps</header>\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst year = new Date().getFullYear();\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n      <p>Copyright ⓒ {year} Wasil</p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\r\n\r\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\nconst weatherURL = `https://api.openweathermap.org/data/2.5/weather?q=`;\r\nconst keyURL = `&appid=${API_KEY}`;\r\nconst units = `&units=metric`;\r\n\r\n// api.openweathermap.org/data/2.5/weather?q={city name}&appid={your api key}\r\n\r\nfunction Weather() {\r\n  const [city, setCity] = useState(\"\");\r\n  const [responseObj, setResponseObj] = useState({});\r\n  const [icon, setIcon] = useState();\r\n  const [temp, setTemp] = useState();\r\n  const [error, setError] = useState(\"Type city name to check the weater.\");\r\n\r\n  const fullURL = weatherURL + city + keyURL + units;\r\n  const iconURL = `http://openweathermap.org/img/wn/${icon}@2x.png`;\r\n\r\n\r\n  function handleCityName(e) {\r\n    const cityName = e.target.value;\r\n    setCity(cityName);    \r\n  }\r\n\r\n  function getWeather(e) {\r\n    e.preventDefault();\r\n\r\n    fetch(fullURL)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.cod !== 200) {     \r\n          throw new Error();\r\n        }\r\n        setResponseObj(data);\r\n        setTemp(data.main.temp);\r\n        setIcon(data.weather[0].icon);\r\n      })\r\n      .catch(err=> {\r\n        setError(\"Wrong city name\");\r\n        setTemp();\r\n        setIcon();\r\n\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"weather-form\">\r\n        <input\r\n          onChange={handleCityName}\r\n          name=\"city\"\r\n          placeholder=\"City\"\r\n          value={city}\r\n          // autoComplete=  \"off\"\r\n\r\n        />\r\n        <div>\r\n        { (icon !== undefined) && <img src={iconURL} alt=\"conditions-img\" /> }\r\n        { (temp === undefined) ? <p>{error}</p> : <h1>{temp} °C</h1> }\r\n        </div>\r\n        <button onClick={getWeather}>Check</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport ToDo from \"./todo/ToDo\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Weather from \"./weather/Weather\";\r\n\r\nfunction Web() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Weather />\r\n      <ToDo />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Web;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Web from './components/Web';\nimport * as serviceWorker from './serviceWorker';\nimport './styles.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}